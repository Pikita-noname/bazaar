// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement()) 
  tg        String    @unique
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders    Order[]
  Review    Review[]
  Cart      Cart[]
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Decimal      @default(0.0)
  imageUrl    String?
  stock       Int          @default(0)
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]

  Review      Review[]
  CartItem    CartItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalPrice  Decimal     @default(0.0)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  Payment     Payment[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Decimal  @default(0.0)
}

model Cart {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
}

model Payment {
  id        Int          @id @default(autoincrement())
  orderId   Int
  order     Order        @relation(fields: [orderId], references: [id])
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}